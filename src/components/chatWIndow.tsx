import React, {useEffect, useRef, useState} from "react";import {Message} from "@/app/page";import {Avatar, AvatarFallback, AvatarImage} from "@/components/ui/avatar";import {Textarea} from "@/components/ui/textarea";type Props = {    messages: Message[];    onNewMessage: (message: string) => Promise<void>;    isLoading: boolean;};export default function ChatWindow({ messages, onNewMessage, isLoading }: Props) {    const [input, setInput] = useState('')    const messagesEndRef = useRef(null);    const handleSubmit = async (e: React.FormEvent) => {        e.preventDefault();        if (input.trim()) {            await onNewMessage(input);            setInput('');        }    };    useEffect(() => {        // @ts-ignore        messagesEndRef?.current?.scrollIntoView({ behavior: "smooth" });    }, [messages]);    return (        <div className="w-full max-w-3xl mx-auto bg-[#F9F5EF] rounded-lg shadow-md overflow-hidden">            <div className="h-[calc(100vh-250px)] overflow-y-auto p-4">                {messages.map((msg, index) => (                    <div key={index} className={`mb-4 ${msg.role === 'user' ? 'text-right' : 'text-left'}`}>                        <div className={`inline-block max-w-[80%] ${msg.role === 'user' ? 'bg-[#786B5E] text-white' : 'bg-white'} rounded-lg p-3 shadow`}>                            <div className='flex space-x-2'>                            <Avatar>                                <AvatarImage src="https://github.com/shadcn.pn" alt="@shadcn" />                                <AvatarFallback>{msg.role === 'user' ? 'ME' : 'MIA'}</AvatarFallback>                            </Avatar>                            <p className={`text-sm ${msg.role === 'user' ? 'text-white' : 'text-[#2A2A2A]'}`}>                                <div dangerouslySetInnerHTML={{ __html: msg.content }} />                            </p></div>                        </div>                    </div>                ))}                {isLoading && (                    <div className="text-center">                        <div className="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-current border-r-transparent align-[-0.125em] motion-reduce:animate-[spin_1.5s_linear_infinite]" role="status">                            <span className="!absolute !-m-px !h-px !w-px !overflow-hidden !whitespace-nowrap !border-0 !p-0 ![clip:rect(0,0,0,0)]">Loading...</span>                        </div>                    </div>                )}                <div ref={messagesEndRef} />            </div>            <div className="border-t border-gray-200 p-4">                <form onSubmit={handleSubmit} className="flex">                    <Textarea                        value={input}                        onChange={(e) => setInput(e.target.value)}                        className="flex-grow p-2 border rounded-l-lg focus:outline-none focus:ring-2 focus:ring-[#786B5E]"                        placeholder="Type here what's on your mind..."                        disabled={isLoading}                    />                    <button                        type="submit"                        className={`bg-[#786B5E] text-white px-4 py-2 rounded-r-lg transition-colors duration-300 ${isLoading ? 'opacity-50 cursor-not-allowed' : 'hover:bg-[#645A4E]'}`}                        disabled={isLoading}                    >                        Send                    </button>                </form>            </div>        </div>    );}