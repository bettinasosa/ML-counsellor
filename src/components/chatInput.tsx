import React, {useState} from "react";import { Textarea } from "@/components/ui/textarea";import { Button } from "@/components/ui/button";import { ArrowUp } from "lucide-react";import {ToastAction} from "@/components/ui/toast";import {useToast} from "@/hooks/use-toast";import {useChatContext} from "@/context/chatContext";import {ChatResponseSchema, Message} from "@/lib/schema/messages";export default function ChatInput() {    const { toast } = useToast();    const [input, setInput] = useState('');    const { setMessages, setThreadId, setContextInfo, threadId, messages, setIsLoading, isLoading } = useChatContext();    // const { files, fileInputRef, handleFileChange, removeFile, clearFiles } = useFileUpload();    const handleNewMessage = async (e: React.FormEvent) => {        e.preventDefault();        // if (!input.trim() && files.length === 0) return;        if (!input.trim()) return;        setIsLoading(true);        const newUserMessage: Message = { role: 'user', text: input };        setMessages(prev => [...prev, newUserMessage]);        console.log('New user message:', messages);        try {            const formData = new FormData();            formData.append('userId', '123'); // dummy user ID for now            formData.append('message', input);            if (threadId) {                formData.append('threadId', threadId);            }            // if (files.length > 0) {            //     files.forEach((file) => {            //         formData.append(`file`, file);            //     });            // }            const response = await fetch('/api/counselor', {                method: 'POST',                body: formData,            });            if (!response.ok) {                throw new Error('Network response was not ok');            }            const data = await response.json();            const chatResponse = ChatResponseSchema.parse(data);            if (chatResponse.aiResponse && chatResponse.threadId) {                setMessages(prev => [...prev, chatResponse.aiResponse]);                setThreadId(chatResponse.threadId);                if (chatResponse.summary) {                    setContextInfo(prev => ({                        ...prev,                        messagesInMemory: prev.messagesInMemory + 2,                        summary: chatResponse.summary ?? '',                    }));                }            } else {                throw new Error('Unexpected response format');            }            setInput('');            // clearFiles();        } catch (error) {            console.error('Error in handleNewMessage:', error);            toast({                variant: "destructive",                title: "Message failed to send",                description: "An error occurred while sending the message.",                action: (                    <ToastAction altText="Please try again." onClick={handleNewMessage}>Try again</ToastAction>                ),            });        } finally {            setIsLoading(false);        }    };    return (        <form onSubmit={handleNewMessage} className="flex w-full flex-col">            {/*{files.length > 0 && (*/}            {/*    <div className="mb-4 space-y-2">*/}            {/*        {files.map((file, index) => (*/}            {/*            <FilePreview*/}            {/*                key={index}*/}            {/*                file={file}*/}            {/*                onRemove={() => removeFile(index)}*/}            {/*            />*/}            {/*        ))}*/}            {/*    </div>*/}            {/*)}*/}            <div className="flex">                <Textarea                    value={input}                    onChange={(e) => setInput(e.target.value)}                    className="resize-none min-h-[44px] border-0 p-3 rounded-xl shadow-none focus-visible:ring-transparent"                    placeholder="Type here what's on your mind..."                    disabled={isLoading}                />                {/*<input*/}                {/*    type="file"*/}                {/*    ref={fileInputRef}*/}                {/*    onChange={handleFileChange}*/}                {/*    className="hidden"*/}                {/*    multiple*/}                {/*/>*/}                {/*<Button*/}                {/*    type="button"*/}                {/*    onClick={() => fileInputRef.current?.click()}*/}                {/*    className="p-2 text-gray-500 hover:text-gray-700"*/}                {/*    variant="ghost"*/}                {/*>*/}                {/*    <Paperclip size={20} />*/}                {/*</Button>*/}                <Button                    type="submit"                    className={`p-2.5 bg-[#786B5E] text-white rounded-full transition-colors duration-300 text-center ${isLoading ? 'opacity-50 cursor-not-allowed' : 'hover:bg-[#645A4E]'}`}                    disabled={isLoading}                >                    <ArrowUp size={20} />                </Button>            </div>        </form>    );}