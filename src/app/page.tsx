'use client'import { useState } from 'react'import ChatWindow from "@/components/chatWIndow";import ContextWindowVisualizer from "@/components/memory";type Role = 'user' | 'assistant';export interface Message {    role: Role;    content: string;}export default function Home() {    const [messages, setMessages] = useState<Message[]>([])    const [error, setError] = useState<string | null>(null);    const [contextInfo, setContextInfo] = useState({        inContextMessages: 0,        outOfContextMessages: 0,        summary: "",    });    const [isLoading, setIsLoading] = useState(false);    const handleNewMessage = async (message: string) => {        setIsLoading(true);        setMessages(prev => [...prev, { role: 'user', content: message }]);        try {            setError(null);            const response = await fetch('/api/chat', {                method: 'POST',                headers: { 'Content-Type': 'application/json' },                body: JSON.stringify({ messages: [...messages, { role: 'user', content: message }] }),            });            if (!response.ok) {              setError('An error occurred while sending the message, please send again');            }            const data = await response.json();            if (data.result && data.contextInfo) {                setMessages(prev => [...prev, { role: 'assistant', content: data.result.content }]);                setContextInfo(data.contextInfo);            } else {                throw new Error('Unexpected response format');            }        } catch (error) {            console.error('Error in handleNewMessage:', error);            setError('An error occurred while sending the message, please send again');        } finally {            setIsLoading(false);        }    };    return (        <div className="container mx-auto p-4">            <h1 className="text-3xl font-bold mb-4 text-center text-[#2A2A2A]">MIA</h1>            <h1 className="text-xl font-bold mb-4 text-center text-[#2A2A2A]">your AI counselor</h1>            <div className="flex flex-col md:flex-row gap-4">                <div className="w-full md:w-2/3">                    {error && <div className="bg-red-100 text-red-700 p-4 rounded-lg mb-4">{error}</div>}                    <ChatWindow messages={messages} onNewMessage={handleNewMessage} isLoading={isLoading}/>                </div>                <div className="w-full md:w-1/3">                    <ContextWindowVisualizer contextInfo={contextInfo} />                </div>            </div>        </div>    )}