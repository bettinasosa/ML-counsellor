import React, { createContext, useContext, useState, ReactNode } from 'react';import {CommonMoods} from "@/lib/schema/mood";import {Message} from "@/lib/schema/messages";interface ChatContextType {    messages: Message[];    setMessages: React.Dispatch<React.SetStateAction<Message[]>>;    isLoading: boolean;    setIsLoading: React.Dispatch<React.SetStateAction<boolean>>;    threadId: string | undefined;    setThreadId: React.Dispatch<React.SetStateAction<string | undefined>>;    contextInfo: {        messagesInMemory: number;        summary: string;    };    setContextInfo: React.Dispatch<React.SetStateAction<{        messagesInMemory: number;        summary: string;    }>>;}const ChatContext = createContext<ChatContextType | undefined>(undefined);export function ChatProvider({ children }: { children: ReactNode }) {    const [messages, setMessages] = useState<Message[]>([]);    const [isLoading, setIsLoading] = useState<boolean>(false);    const [threadId, setThreadId] = useState<string | undefined>(undefined);    const [contextInfo, setContextInfo] = useState({        messagesInMemory: 0,        summary: "",    });    return (        <ChatContext.Provider value={{            messages,            setMessages,            isLoading,            setIsLoading,            threadId,            setThreadId,            contextInfo,            setContextInfo,        }}>            {children}        </ChatContext.Provider>    );}export function useChatContext() {    const context = useContext(ChatContext);    if (context === undefined) {        throw new Error('useChatContext must be used within a ChatProvider');    }    return context;}