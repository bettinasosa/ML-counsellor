export const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));export function sanitizeHeaderValue(value: string): string {    return value.replace(/[^\x20-\x7E]/g, "");}export function debugMessage(msg: string, data: any = {}) {    console.log(msg, data);    const timestamp = new Date().toISOString().replace(/[^\x20-\x7E]/g, "");    const safeData = JSON.parse(JSON.stringify(data));    return JSON.stringify({msg, data: safeData, timestamp});}export function logTimestamp(label: string, start: number) {    const timestamp = new Date().toISOString();    const time = ((performance.now() - start) / 1000).toFixed(2);    console.log(`⏱️ [${timestamp}] ${label}: ${time}s`);}export function sanitizeAndParseJSON(jsonString: string) {    // Handle JSON strings with unescaped newlines inside values    const sanitized = jsonString.replace(/(?<=:\s*")(.|\n)*?(?=")/g, match => match.replace(/\n/g, "\\n"));    try {        return JSON.parse(sanitized);    } catch (parseError) {        console.error("Error parsing JSON response:", parseError);        throw new Error("Invalid JSON response from AI");    }}export function isLikelyMarkdown(text: string): boolean {    const markdownPatterns = [        /[*_]{1,2}[^*_]+[*_]{1,2}/, // bold or italic        /#{1,6}\s.+/, // headers        /\[.+\]\(.+\)/, // links        /^[\*\-\+]\s.+/m, // unordered lists        /^\d+\.\s.+/m, // ordered lists        /^\>.+/m, // blockquotes        /!\[.+\]\(.+\)/, // images        /\|.+\|.+\|/, // tables        /^---$/m, // horizontal rules    ];    return markdownPatterns.some(pattern => pattern.test(text));}